os:
  - linux
  - osx

dist: xenial

env:
  - MPI_LIBRARY=openmpi-4.0.1
  - MPI_LIBRARY=openmpi-3.1.4
  - MPI_LIBRARY=mpich-3.3.1

cache:
  directories:
  - $HOME/mpich-3.3.1-build
  - $HOME/openmpi-4.0.1-build
  - $HOME/openmpi-3.1.4-build
  - $HOME/petsc-mpich-3.3.1-build
  - $HOME/petsc-openmpi-4.0.1-build
  - $HOME/petsc-openmpi-3.1.4-build

services:
  - xvfb

language: cpp

compiler:
  - clang
  - gcc

addons:
  homebrew:
    update: true
    packages:
      - cmake
  apt:
    update: true
    packages:
      - cmake
      - python3
      - python3-numpy
      - python3-matplotlib
      - python3-tk
      - python3-scipy

install:
  - |
    if [ "$TRAVIS_OS_NAME" == "osx" ]
    then
      pip3 install --user matplotlib
      pip3 install --user scipy
    fi
  - |
    pushd $HOME
    if [ -f "$MPI_LIBRARY-build/bin/mpiexec" ]
    then
      echo "mpiexec found, nothing to build"
    else
      if [ "${MPI_LIBRARY:0:7}" == "openmpi" ]
      then
        DOWNLOAD_URL="https://download.open-mpi.org/release/open-mpi/v${MPI_LIBRARY:8:3}/$MPI_LIBRARY.tar.gz"
        CONF_OPTIONS=
      elif [ "${MPI_LIBRARY:0:5}" == "mpich" ]
      then
        DOWNLOAD_URL="http://www.mpich.org/static/downloads/${MPI_LIBRARY:6:5}/$MPI_LIBRARY.tar.gz"
        CONF_OPTIONS="--disable-fortran"
      else
        echo "Invalid MPI library: $MPI_LIBRARY"
        exit 1
      fi
      echo "Downloading $MPI_LIBRARY source."
      wget "$DOWNLOAD_URL"
      tar -xzf "$MPI_LIBRARY.tar.gz"
      rm "$MPI_LIBRARY.tar.gz"
      echo "Configuring and building $MPI_LIBRARY source."
      cd "$MPI_LIBRARY"
      ./configure --prefix="$HOME/$MPI_LIBRARY-build" "$CONF_OPTIONS"
      make -j6
      make install
      cd -
      rm -rf "$MPI_LIBRARY"
    fi
    export PATH="$HOME/${MPI_LIBRARY}-build/bin:$PATH"
    export LD_LIBRARY_PATH="$HOME/${MPI_LIBRARY}-build/bin:$LD_LIBRARY_PATH"
    popd
  - |
    pushd $HOME
    if [ -f "petsc-$MPI_LIBRARY-build" ]
    then
      echo "PETSc build found, nothing to do"
    else
      wget http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-3.7.7.tar.gz
      tar -xzf petsc-3.7.7.tar.gz
      rm petsc-3.7.7.tar.gz
      cd petsc-3.7.7
      PETSC_BUILD_CMD=$(./configure \
        --prefix="$HOME/petsc-$MPI_LIBRARY-build" \
        --with-mpi-dir="$HOME/$MPI_LIBRARY-build" \
        --download-hdf5=yes \
        --download-metis=yes \
        --download-parmetis=yes \
        | tee ../petsc-configure.log \
        | grep 'make PETSC_DIR')
      PETSC_INSTALL_CMD=$($PETSC_BUILD_CMD \
        | tee ../petsc-build.log \
        | grep 'make PETSC_DIR')
      $PETSC_INSTALL_CMD > ../petsc-install.log
      cd -
      rm -rf petsc-3.7.7
      export PETSC_DIR="$HOME/petsc-$MPI_LIBRARY-build"
      PETSC_ARCH_ASS=$(echo $PETSC_INSTALL_CMD \
        | grep -o 'PETSC_ARCH=[^ ]\+')
      export $PETSC_ARCH_ASS
    fi
    popd

script:
  - echo $PETSC_DIR
  - echo $PETSC_ARCH
  - mkdir build && cd build && cmake .. && make -j6 && ctest --verbose
  - cd scaling && ./run-scaling.sh
  - cd ../examples/biased-coin-flip && ./run-cpp-abc-rejection-serial-example.sh
  - ./run-cpp-abc-rejection-mpi-example.sh
  - ./run-cpp-abc-smc-serial-example.sh
  - ./run-cpp-abc-smc-mpi-example.sh
  - ./run-python-abc-rejection-serial-example.sh
  - ./run-python-abc-rejection-mpi-example.sh
  - ./run-python-abc-smc-serial-example.sh
  - ./run-python-abc-smc-mpi-example.sh
  - cd ../sis-model && ./run-abc-rejection-serial-example.sh
  - ./run-abc-rejection-mpi-example.sh
  - ./run-abc-smc-serial-example.sh
  - ./run-abc-smc-mpi-example.sh
